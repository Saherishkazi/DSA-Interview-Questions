import java.util.*;

class Solution {
    public String minWindow(String s, String t) {
        if(s.length() == 0 || t.length() == 0) return "";

        Map<Character, Integer> tFreq = new HashMap<>();
        for(char c : t.toCharArray()) {
            tFreq.put(c, tFreq.getOrDefault(c, 0) + 1);
        }

        int required = tFreq.size(); // unique chars needed
        int formed = 0; // unique chars met with required freq

        Map<Character, Integer> windowCounts = new HashMap<>();
        int l = 0, r = 0;

        // ans format: [window length, left, right]
        int[] ans = {-1, 0, 0};

        while(r < s.length()) {
            char c = s.charAt(r);
            windowCounts.put(c, windowCounts.getOrDefault(c, 0) + 1);

            if(tFreq.containsKey(c) && windowCounts.get(c).intValue() == tFreq.get(c).intValue()) {
                formed++;
            }

            // Try and contract the window till the point it ceases to be 'desirable'
            while(l <= r && formed == required) {
                c = s.charAt(l);
                if(ans[0] == -1 || r - l + 1 < ans[0]) {
                    ans[0] = r - l + 1;
                    ans[1] = l;
                    ans[2] = r;
                }

                windowCounts.put(c, windowCounts.get(c) - 1);
                if(tFreq.containsKey(c) && windowCounts.get(c).intValue() < tFreq.get(c).intValue()) {
                    formed--;
                }
                l++;
            }
            r++;   
        }

        return ans[0] == -1 ? "" : s.substring(ans[1], ans[2] + 1);
    }
}
