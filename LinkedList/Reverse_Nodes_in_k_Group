/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode reverseKGroup(ListNode head, int k) {
        if (head == null || k == 1) return head;


        // Dummy node to handle edge cases
        ListNode dummy = new ListNode(0);
        dummy.next = head;

        // Pointers
        ListNode prevGroupTail = dummy;
        ListNode curr = head;

        while (true) {
            // Step 1: Check if k nodes remain
            ListNode temp = curr;
            int count = 0;
            while (temp != null && count < k) {
                temp = temp.next;
                count++;
            }
            if (count < k) break; // less than k nodes â†’ stop

            // Step 2: Reverse k nodes
            ListNode prev = null;
            ListNode next = null;
            ListNode groupHead = curr; // will become tail after reversal
            for (int i = 0; i < k; i++) {
                next = curr.next;
                curr.next = prev;
                prev = curr;
                curr = next;
            }

            // Step 3: Connect reversed group with previous and next part
            prevGroupTail.next = prev;
            groupHead.next = curr;

            // Step 4: Move prevGroupTail to groupHead
            prevGroupTail = groupHead;
        }

        return dummy.next;
    }
}
